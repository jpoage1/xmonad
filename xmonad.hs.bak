{-# LANGUAGE LambdaCase #-}

import Control.Exception (SomeException, try)
import Control.Monad (forM_, unless, void)
import Control.Monad.IO.Class (liftIO)
import Data.List (isInfixOf)
import qualified Data.Text as T
import qualified Data.Text.IO as TIO
import Data.Time (defaultTimeLocale, formatTime, getCurrentTime)
import Data.Time.Clock
import Data.Time.Format
import Data.Time.Format (defaultTimeLocale, formatTime)
import Graphics.X11.ExtraTypes.XF86
import NitrogenWallpaper (setRandomNitrogenWallpaper)
import System.Directory (createDirectoryIfMissing, getHomeDirectory, listDirectory, renameFile)
import System.Exit (ExitCode (..), exitSuccess)
import System.FilePath ((</>))
import System.IO (getLine, hFlush, hGetContents, putStr, stdout)
import System.Process
import System.Process (CreateProcess (..), StdStream (..), callProcess, createProcess, proc, readCreateProcess, shell, spawnCommand, waitForProcess)
import XMonad
import XMonad.Actions.FloatKeys (keysResizeWindow)
import XMonad.Actions.MouseResize
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.EwmhDesktops (ewmh, ewmhFullscreen)
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.ManageHelpers
import XMonad.Layout.BorderResize
import XMonad.Layout.LayoutModifier
import XMonad.Layout.Magnifier
import XMonad.Layout.NoBorders
import XMonad.Layout.SimpleFloat
import XMonad.Layout.ThreeColumns
import XMonad.Operations (unGrab)
import XMonad.Prompt
import XMonad.Prompt.ConfirmPrompt
import XMonad.Prompt.Input (inputPrompt)
import XMonad.Util.EZConfig (additionalKeysP)
import XMonad.Util.Paste
import XMonad.Util.Run (runProcessWithInput, safeSpawn)
import XMonad.Util.SpawnOnce

-- import XMonad.Operations.unGrab

main :: IO ()
main =
  xmonad $
    ewmhFullscreen $
      ewmh
        def
          { modMask = mod4Mask, -- Rebind Mod to the Super key
            layoutHook = myLayout, -- Use custom layouts
            manageHook = manageDocks <+> myManageHook <+> manageHook def,
            terminal = "alacritty",
            focusFollowsMouse = False,
            startupHook = myStartupHook
          }
        `additionalKeysP` [ ("M-S-'", kill),
                            ("<Print>", unGrab *> spawn "scrot -s ~/Pictures/screenshot_%Y-%m-%d_%H-%M-%S.png"),
                            ("M-<Print>", takeScreenshotWithPrompt "/tmp/screenshot.png"),
                            ("M-S-.", confirmPrompt myXPConfig "Exit XMonad?" $ io exitSuccess),
                            ("M-S-l", spawn "i3lock"),
                            ("M-S-p", launchPolybar),
                            -- ("M-S-m", spawn "alacritty workspaces"), -- Rofi Menu
                            ("M-m", spawn "rofi -show drun"), -- Show applications
                            ("M-w", spawn "rofi -show window"), -- Show open windows
                            ("<XF86AudioRaiseVolume>", spawn "pamixer -i 5"),
                            ("<XF86AudioLowerVolume>", spawn "pamixer -d 5"),
                            ("<XF86AudioMute>", spawn "pamixer -t"),
                            ("M-<Insert>", toggleKBLayout),
                            ("<Insert>", pasteSelection),
                            ("M-S-h", withFocused (keysResizeWindow (-10, 0) (0, 0))),
                            ("M-S-l", withFocused (keysResizeWindow (10, 0) (0, 0))),
                            ("M-S-k", withFocused (keysResizeWindow (0, -10) (0, 0))),
                            (("M-S-j"), withFocused (keysResizeWindow (0, 10) (0, 0))),
                            ("M-S-<Down>", withFocused (keysResizeWindow (0, 10) (0, 0))),
                            ("M-S-<Up>", withFocused (keysResizeWindow (0, -10) (0, 0))),
                            ("M-S-<Right>", withFocused (keysResizeWindow (10, 0) (0, 0))),
                            ("M-S-<Left>", withFocused (keysResizeWindow (-10, 0) (0, 0))),
                            ("M-b", sendMessage ToggleStruts),
                            ("M-c", runConky)
                          ]

myLayout = avoidStruts $ mouseResize $ borderResize $ smartBorders $ tiled ||| Mirror tiled ||| Full ||| threeCol ||| simpleFloat
  where
    threeCol = magnifiercz' 1.3 $ ThreeColMid nmaster delta ratio
    tiled = Tall nmaster delta ratio
    nmaster = 1 -- Default number of windows in the master pane
    ratio = 1 / 2 -- Default proportion of screen occupied by master pane
    delta = 3 / 100 -- Percent of screen to increment by when resizing panes

launchBar :: String -> X ()
launchBar bar = spawn $ "polybar " ++ bar ++ " 2>&1 | tee -a /tmp/polybar-" ++ bar ++ ".log"

launchPolybar :: X ()
launchPolybar = do
  spawn "killall -q polybar"
  launchBar "xmonad-top"
  launchBar "xmonad-bottom"

myStartupHook :: X ()
myStartupHook = do
  spawn "setxkbmap -layout us -variant dvorak"
  spawn "dunst"
  spawn "xss-lock --transfer-sleep-lock -- i3lock --nofork"
  launchPolybar
  io setRandomNitrogenWallpaper
  runConky

toggleKBLayout :: X ()
toggleKBLayout = do
  layout <- io $ readProcess "setxkbmap" ["-query"] ""
  let isDvorak = any ("dvorak" `isInfixOf`) (lines layout)
  if isDvorak
    then spawn "setxkbmap us"
    else spawn "setxkbmap us -variant dvorak"

myManageHook =
  composeAll
    [ className =? "Xmessage" --> doFloat,
      className =? "Zenity" --> doFloat,
      className =? "Conky" --> doFloat,
      isDialog --> doFloat
    ]

exitWithConfirm :: X ()
exitWithConfirm = confirmPrompt def "Exit XMonad?" $ io exitSuccess

takeScreenshotWithPrompt :: FilePath -> X ()
takeScreenshotWithPrompt tmpPath = do
  -- Run scrot synchronously and wait
  liftIO $ callProcess "scrot" ["-s", tmpPath]

  -- After scrot finishes, prompt user for filename
  filename <- inputPrompt myXPConfig "Enter filename (including extension): "

  case filename of
    Nothing -> return ()
    Just fn -> liftIO $ renameFile tmpPath fn

getInputString :: X String
getInputString = do
  mbInput <- inputPrompt myXPConfig "Enter filename (including extension): "
  return $ maybe "" id mbInput

myXPConfig :: XPConfig
myXPConfig =
  def
    { font = "xft:Ubuntu Mono:size=12",
      bgColor = "#282A2E",
      fgColor = "#C5C8C6",
      bgHLight = "#F0C674",
      fgHLight = "#282A2E",
      borderColor = "#F0C674",
      promptBorderWidth = 2,
      position = CenteredAt 0.5 0.5,
      height = 50
    }

runConky :: X ()
runConky = do
  home <- io getHomeDirectory
  now <- io getCurrentTime
  let timestamp = formatTime defaultTimeLocale "%F %T" now
      config_dir = home </> ".config/conky/conf-enabled/"
      debugLog = home </> ".config/xmonad/conky_debug.log"
  files <- io $ listDirectory config_dir
  let configs = map (config_dir </>) files
  forM_ configs $ \config -> do
    output <- io $ readCreateProcess (shell "pgrep -af conky") ""
    let match = "conky -c " ++ config
    if match `isInfixOf` output
      then io $ appendFile debugLog (timestamp ++ ": Conky running with config: " ++ config ++ "\n")
      else do
        io $ appendFile debugLog (timestamp ++ ": Starting conky with config: " ++ config ++ "\n")
        spawn $ "conky -c " ++ config
